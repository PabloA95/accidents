input {
	file {
		path => "/home/pablo/Descargas/BBDD2/ENTREGA/accidents-100.csv"
		start_position => beginning
	}
}
filter {
	csv {
		skip_header => "true"
		columns => [
				"id",
				"source",
				"TMC",
				"severity",
				"startTime",
				"endTime",
				"startLat",
				"startLng",
				"endLat",
				"endLng",
				"distance",
				"description",
				"number",
				"street",
				"side",
				"city",
				"county",
				"state",
				"zipcode",
				"country",
				"timezone",
				"airportCode",
				"weatherTimestamp",
				"temperature",
				"windChill",
				"humidity",
				"pressure",
				"visibility",
				"windDirection",
				"windSpeed",
				"precipitation",
				"weatherCondition",
				"amenity",
				"bump",
				"crossing",
				"giveWay",
				"junction",
				"noExit",
				"railway",
				"roundabout",
				"station",
				"stop",
				"trafficCalming",
				"trafficSignal",
				"turningLoop",
				"sunriseSunset",
				"civilTwilight",
				"nauticalTwilight",
				"astronomicalTwilight"
		]
		separator => ","
	}
	if ([col2] == "source") {
		drop { }
	} 
	mutate {
		convert => { "number" => "integer" }

		convert => { "startLng" => "float" }
		convert => { "startLat" => "float" }
		convert => { "endLng" => "float" }
		convert => { "endLat" => "float" }

		convert => { "distance" => "float" }
		convert => { "temperature" => "float" }
		convert => { "windChill" => "float" }
		convert => { "humidity" => "float" }
		convert => { "pressure" => "float" }
		convert => { "visibility" => "float" }
		convert => { "windSpeed" => "float" }
		convert => { "precipitation" => "float" }

		convert => { "amenity" => "boolean" }
		convert => { "bump" => "boolean" }
		convert => { "crossing" => "boolean" }
		convert => { "giveWay" => "boolean" }
		convert => { "junction" => "boolean" }
		convert => { "noExit" => "boolean" }
		convert => { "railway" => "boolean" }
		convert => { "roundabout" => "boolean" }
		convert => { "station" => "boolean" }
		convert => { "stop" => "boolean" }
		convert => { "trafficCalming" => "boolean" }
		convert => { "trafficSignal" => "boolean" }
		convert => { "turningLoop" => "boolean" }

	}
	mutate {
		copy => {
			"startLng" => "[startPos][lon]"
			"startLat" => "[startPos][lat]"
		}
	}
	mutate {
		copy => {
			"endLng" => "[endPos][lon]"
			"endLat" => "[endPos][lat]"
		}
	}
}

output {
	stdout
	{
		codec => rubydebug
	}
	 elasticsearch {
		action => "index"
		hosts => ["127.0.0.1:9200"]
		index => "prueba_geo_end"
	}
}
